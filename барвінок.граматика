%name parser

%hpp {
    #include "ast/ast.hpp"
}

%cpp {
    using namespace ast;

    Token newToken(const std::string& text, const PParser::TokenPos& pos)
    {
        Token tok { pos.startLine, pos.startCol, text };
        return tok;
    }

    BlockStatement* newBlockStatementExcludeOptional(const std::vector<std::optional<Statement*>>& statements)
    {
        auto blockStatement = new BlockStatement({});
        for (auto& s: statements)
            if (s.has_value())
                blockStatement->statements.push_back(s.value());
        return blockStatement;
    }
}

%type "ast::Node*"

program<ast::BlockStatement*> = BOM? shebang? _? s:statement* _? EOF
    { $$ = newBlockStatementExcludeOptional(s); }
    ~{ parseError("Неправильний синтаксис."); }

shebang -inline = "#!" (!EOL .)+ EOL

statement<std::optional<ast::Statement*>> =
    / comments? _? s:statement_ comments? _? { $$ = s; }
    / comments _? { $$ = std::nullopt; }

statement_<ast::Statement*> =
    / s:if_statement { $$ = s; }
    / s:while_statement { $$ = s; }
    / s:for_each_statement { $$ = s; }
    / s:break_statement { $$ = s; }
    / s:continue_statement { $$ = s; }
    / s:return_statement { $$ = s; }
    / s:function_declaration { $$ = s; }
    / s:try_catch_statement { $$ = s; }
    / s:raise_statement { $$ = s; }
    / e:expression { $$ = new ExpressionStatement(e); }

if_statement<ast::IfStatement*> = s:if_statement_ _? "кінець" { $$ = s; }
if_statement_<ast::IfStatement*> = "якщо" _ c:rhs b:if_block* e:else_or_if?
    { $$ = new IfStatement(newToken("якщо", $1), c, newBlockStatementExcludeOptional(b), e); }
else_or_if<ast::Statement*> =
    / "або " &"якщо" s:if_statement_ { $$ = s; static_cast<ast::IfStatement*>($$)->if_ = newToken("або якщо", $1); }
    / "інакше" _ b:if_block* { $$ = new ElseStatement(newToken("інакше", $1), newBlockStatementExcludeOptional(b)); }
if_block<std::optional<ast::Statement*>> = !("кінець" / "або якщо" / "інакше") s:statement { $$ = s; }

block_statement<std::optional<ast::Statement*>> = !"кінець" s:statement { $$ = s; }

while_statement<ast::WhileStatement*> = "поки" _ c:rhs b:block_statement* _? "кінець"
    { $$ = new WhileStatement(newToken("поки", $1), c, newBlockStatementExcludeOptional(b)); }

for_each_statement<ast::ForEachStatement*> = "обійти" _ e:rhs _ "як" _ id:identifier b:block_statement* _? "кінець"
    { $$ = new ForEachStatement(newToken("обійти", $1), newToken(id, $7), e, newBlockStatementExcludeOptional(b)); }

break_statement<ast::BreakStatement*> = "завершити" { $$ = new BreakStatement(newToken("завершити", $1)); }
continue_statement<ast::ContinueStatement*> = "пропустити" { $$ = new ContinueStatement(newToken("пропустити", $1)); }

return_statement<ast::ReturnStatement*> = "повернути" (_ e:rhs / ";")
    { $$ = new ReturnStatement(newToken("повернути", $1), e); }

function_declaration<ast::FunctionDeclaration*> =
    "функція" _ id:identifier _? "(" _? params:function_params? _? ")" b:block_statement* _? "кінець"
    {
        if (params){
            auto& [p, v, d] = params.value();
            $$ = new FunctionDeclaration(newToken(id, $3), p, v, d, newBlockStatementExcludeOptional(b));
        } else {
            $$ = new FunctionDeclaration(newToken(id, $3), {}, std::nullopt, {}, newBlockStatementExcludeOptional(b));
        }
    }

function_params<std::tuple<
        ast::FunctionDeclaration::parameters_t,
        ast::FunctionDeclaration::variadicParameter_t,
        ast::FunctionDeclaration::defaultParameters_t>
    > =
    / p:parameters _? "," _? v:variadic_parameter _? "," _? d:default_parameters { $$ = { p, v, d }; }
    / p:parameters _? "," _? d:default_parameters { $$ = { p, std::nullopt, d }; }
    / p:parameters _? "," _? v:variadic_parameter { $$ = { p, v, {} }; }
    / v:variadic_parameter _? "," _? d:default_parameters { $$ = { {}, v, d }; }
    / p:parameters { $$ = { p, std::nullopt, {} }; }
    / v:variadic_parameter { $$ = { FunctionDeclaration::parameters_t{}, v, {} }; }
    / d:default_parameters { $$ = { {}, std::nullopt, d }; }

parameters<ast::FunctionDeclaration::parameters_t> =
    / params:parameters _? "," _? !variadic_parameter !default_parameter p:identifier { $$ = params; $$.push_back(newToken(p, $5)); }
    / !variadic_parameter !default_parameter p:identifier { $$.push_back(newToken(p, $1)); }

variadic_parameter<ast::Token> = !default_parameter vparam:identifier "..." { $$ = newToken(vparam, $2); }

default_parameters<ast::FunctionDeclaration::defaultParameters_t> =
    / dparams:default_parameters _? "," _? d:default_parameter { $$ = dparams; $$.push_back(d); }
    / d:default_parameter { $$.push_back(d); }

default_parameter<ast::FunctionDeclaration::defaultParameter_t> = id:identifier _? "=" _? v:rhs { $$ = { newToken(id, $1), v }; }

try_catch_statement<ast::TryCatchStatement*> = "спробувати" _ b:try_catch_block+ c:catch+ f:finally? "кінець"
    { $$ = new TryCatchStatement(newToken("спробувати", $1), newBlockStatementExcludeOptional(b), c, f); }
    / "спробувати" _ !try_catch_block { $$; parseError("Блок \"спробувати\" не може бути пустим."); }
    / "спробувати" _ try_catch_block+ !catch { $$; parseError("В обробнику помилок повинен бути хоча б один блок \"обробити\""); }

catch<ast::CatchBlock*> = "обробити" _ exceptionName:identifier _ var:catch_var? b:try_catch_block*
    {
        $$ = new CatchBlock{newToken("обробити", $1), newToken(exceptionName, $3)};
        $$->block = newBlockStatementExcludeOptional(b);
        if (var.has_value())
        {
            $$->as = var.value().first;
            $$->variableName = var.value().second;
        }
    }

catch_var<std::pair<ast::Token, ast::Token>> = "як" _ var:identifier { $$ = { newToken("як", $1), newToken(var, $3) }; }

finally<ast::FinallyBlock*> = "наприкінці" _ b:try_catch_block*
    { $$ = new FinallyBlock{ newToken("наприкінці", $1), newBlockStatementExcludeOptional(b) }; }

try_catch_block<std::optional<ast::Statement*>> = !("кінець" / "обробити" / "наприкінці") s:statement { $$ = s; }

raise_statement<ast::RaiseStatement*> =
    / "жбурнути" _ e:expression { $$ = new RaiseStatement(newToken("жбурнути", $1), e); }
    / "жбурнути" !(_ expression) { $$; parseError("Після \"жбурнути\" повинний бути вираз"); }

expression<ast::Expression*> =
    / e:assignment_expression { $$ = e; }
    / e:rhs { $$ = e; }

lhs<std::string> = id:identifier { $$ = id; }
rhs<ast::Expression*> = e:disjunction { $$ = e; }

disjunction<ast::Expression*> =
    / l:disjunction _ "або" _ r:conjunction { $$ = new BinaryExpression(l, newToken("або", $3), r); }
    / e:conjunction { $$ = e; }

conjunction<ast::Expression*> =
    / l:conjunction _ "та" _ r:inversion { $$ = new BinaryExpression(l, newToken("та", $3), r); }
    / e:inversion { $$ = e; }

inversion<ast::Expression*> =
    / "не" _ e:inversion { $$ = new UnaryExpression(newToken("не", $1), e); }
    / e:comparison { $$ = e; }

comparison<ast::Expression*> =
    / l:comparison _ op:("є" / "менше" "="? / "більше" "="? / "==" / "!=") _ r:sum
        { $$ = new BinaryExpression(l, newToken(op, $3), r); }
    / l:comparison _? op:("==" / "!=") _? r:sum
        { $$ = new BinaryExpression(l, newToken(op, $3), r); }
    / e:sum { $$ = e; }

sum<ast::Expression*> =
    / l:sum _? op:[+-] _? r:term { $$ = new BinaryExpression(l, newToken(op, $3), r); }
    / e:term { $$ = e; }

term<ast::Expression*> =
    / l:term _? op:("*" / "//" / "/" / "%") _? r:factor { $$ = new BinaryExpression(l, newToken(op, $3), r); }
    / e:factor { $$ = e; }

factor<ast::Expression*> =
    / num:number { $$ = num; }  # Для коректного оброблення чисел з вказаним знаком
    / op:("+" / "-") _? e:factor { $$ = new UnaryExpression(newToken(op, $1), e); }
    / e:primary { $$ = e; }

primary<ast::Expression*> =
    / e:primary _? "." _? id:identifier { $$ = new AttributeExpression(e, newToken(id, $5)); }
    / e:primary _? "(" _? args:call_arguments? _? ")"
        {
            if (args) {
                auto& [a, n] = args.value();
                $$ = new CallExpression(e, a, n);
            } else {
                $$ = new CallExpression(e, {}, {});
            }
        }
    / v:("істина" / "хиба") { $$ = new LiteralExpression(newToken(v, $1), LiteralExpression::Type::BOOLEAN, v == "істина"); }
    / num:number { $$ = num; }
    / s:("\"" body:("\\\""? !"\"" .)* "\"") { $$ = new LiteralExpression(newToken(s, $1), LiteralExpression::Type::STRING, body); }
    / "ніц" { $$ = new LiteralExpression(newToken("ніц", $1), LiteralExpression::Type::NULL_, {}); }
    / id:identifier { $$ = new VariableExpression(newToken(id, $1)); }
    / "(" e:rhs ")" { $$ = new ParenthesizedExpression(e); }

number<ast::LiteralExpression*> =
    / num:([-+]? (("0" / [1-9][0-9]*) "." [0-9]*) / ([1-9]* "." [0-9]+))
        {
            try {
                $$ = new LiteralExpression(newToken(num, $1), LiteralExpression::Type::REAL, std::stod(num));
            } catch(const std::out_of_range& e) {
                parseError("Число не входить в діапазон можливих значень дійсного числа");
            }
        }
    / num:([-+]? ("0" / [1-9][0-9]*))
        {
            try {
                $$ = new LiteralExpression(newToken(num, $1), LiteralExpression::Type::NUMBER, std::stoll(num));
            } catch (const std::out_of_range& e) {
                parseError("Число не входить в діапазон можливих значень числа");
            }
        }

call_arguments<
    std::tuple<
        ast::CallExpression::arguments_t,
        ast::CallExpression::namedArguments_t>
    > =
    / a:arguments _? "," _? n:named_arguments { $$ = { a, n }; }
    / a:arguments { $$ = { a, {} }; }
    / n:named_arguments { $$ = { CallExpression::arguments_t{}, n }; }

arguments<ast::CallExpression::arguments_t> =
    / args:arguments _? "," _? !named_argument a:rhs { $$ = args; $$.push_back(a); }
    / !named_argument a:rhs { $$.push_back(a); }

named_arguments<ast::CallExpression::namedArguments_t> =
    / nargs:named_arguments _? "," _? a:named_argument { $$ = nargs; $$.push_back(a); }
    / a:named_argument { $$.push_back(a); }

named_argument<ast::CallExpression::namedArgument_t> = id:identifier _? "=" _? v:rhs { $$ = {newToken(id, $1), v}; }

assignment_expression<ast::AssignmentExpression*> = l:lhs _? op:(("//" / [-+*/%])? "=") _? r:rhs
    { $$ = new AssignmentExpression(newToken(l, $1), newToken(op, $2), r); }

identifier<std::string> =
    / !keywords id:([а-щА-ЩьюяїієґЬЮЯЇІЄҐ_][а-щА-ЩьюяїієґЬЮЯЇІЄҐ0-9_']*) { $$ = id; }
    / &"'" { $$; parseError("Ім'я не може починатись апострофом"); }

keywords =
    ("якщо" / "або" / "інакше" / "кінець" / "поки" / "пропустити" / "завершити" / "менше" / "більше"
     / "є" / "не" / "та" / "функція" / "повернути" / "обійти" / "спробувати" / "обробити"
     / "як" / "наприкінці" / "жбурнути") ![а-щА-ЩьюяїієґЬЮЯЇІЄҐ0-9_']

comments = (_? comment)+
comment = "!" (!(EOL / EOF) .)* (EOL / EOF)

_ -nomemo = [ \t\r\n]+
EOL -nomemo = "\n" / "\r" / "\r\n"
EOF -inline = !.
BOM -inline = "\xEF\xBB\xBF"  # UTF-8 byte order mask
